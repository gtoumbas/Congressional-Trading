    #TODO collect state / total earnings data
    # Name 
    create = False

    fname = trade_html.find(class_="q-field firstName").getText()
    lname = trade_html.find(class_="q-field lastName").getText()
    name = fname + " " + lname
    # Chamber
    regex = re.compile('.*q-field chamber.*')
    chamber = trade_html.find("span", {"class" : regex}).getText()

    # Party
    if trade_html.find(class_="q-field party party--democrat"): party = "dem"
    elif trade_html.find(class_="q-field party party--republican"): party = "rep"
    else: party = "ind"

    # Date
    date_element = trade_html.find(class_="q-data-cell tx-date")
    trade_date = date_element.find(class_="q-field format--date-iso").find('time').getText()
    trade_date = date.fromisoformat(trade_date) - timedelta(days=1) # Not sure why i have to do this
    
    # Delay in Days
    regex = re.compile('.*q-value reporting-gap.*')
    delay = trade_html.find("div", {"class" : regex}).getText()

    # Ticker 
    ticker = trade_html.find(class_="q-field company-ticker").getText().split(":")[0]
    
    # # Stock Price 
    # stock_price = trade_html.find(class_="q-field trade-price")
    # if not stock_price:
    #     print(f"{name}  {trade_date}   {ticker}")
    #     return False
    # stock_price = float(stock_price.getText().replace(",",""))




        # file.write(json.dumps([info]))
    # print(info)
    return False
    trade_info = soup.find(class_="q-data-cell filing-date flavour--labelled-value")
    num_shares = trade_info.find(class_="q-value").getText()
    num_shares = "".join(num_shares.split())

    # stock price 
    price_info = soup.find_all(class_="q-data-cell tx-date flavour--labelled-value")[-1]
    sp = price_info.find(class_="q-value")

    stock_price = float(sp.getText())

    # Buy / Sell
    regex = re.compile('.*q-field tx-type.*')
    kind = trade_html.find("span", {"class": regex}).getText()


    # Creating DB objects

    member, created = Member.get_or_create(name=name, party=party, chamber=chamber)
    if created:
        member.save()

    trade, created = Trade.get_or_create(member=member, num_shares=num_shares, share_price=stock_price,
                        stock=ticker, date=trade_date, delay=delay, kind=kind)
    if created:
        trade.save()
        create = True
    
    return True